[{"/Users/williamdye/WillGit/web-module-project-reducer/src/index.js":"1","/Users/williamdye/WillGit/web-module-project-reducer/src/App.js":"2","/Users/williamdye/WillGit/web-module-project-reducer/src/reportWebVitals.js":"3","/Users/williamdye/WillGit/web-module-project-reducer/src/components/CalcButton.js":"4","/Users/williamdye/WillGit/web-module-project-reducer/src/components/TotalDisplay.js":"5","/Users/williamdye/WillGit/web-module-project-reducer/src/reducers/index.js":"6","/Users/williamdye/WillGit/web-module-project-reducer/src/actions/index.js":"7"},{"size":500,"mtime":1618181564605,"results":"8","hashOfConfig":"9"},{"size":2805,"mtime":1618276145449,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1618181564605,"results":"11","hashOfConfig":"9"},{"size":286,"mtime":1618181564604,"results":"12","hashOfConfig":"9"},{"size":424,"mtime":1618181564604,"results":"13","hashOfConfig":"9"},{"size":1867,"mtime":1618276166777,"results":"14","hashOfConfig":"9"},{"size":886,"mtime":1618276079655,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"12xl7iy",{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/williamdye/WillGit/web-module-project-reducer/src/index.js",[],["33","34"],"/Users/williamdye/WillGit/web-module-project-reducer/src/App.js",["35","36","37"],"import React, { useReducer } from 'react';\nimport reducer, { initialState } from './reducers/index'\nimport './App.css';\n\nimport { addOne, applyNumber, changeOperation, clearDisplay, addToMemory, applyMemory, clearMemory } from './actions/index'\n\nimport TotalDisplay from './components/TotalDisplay';\nimport CalcButton from './components/CalcButton';\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"#\"><img width=\"40px\" src=\"./Lambda-Logo-Red.png\"/> Lambda Reducer Challenge</a>\n      </nav>\n\n      <div className = \"container row mt-5\">\n        <div className=\"col-md-12 d-flex justify-content-center\">\n          <form name=\"Cal\">\n            \n            <TotalDisplay value={state.total}/>\n            <div className=\"row details\">\n              <span id=\"operation\"><b>Operation:</b> {state.operation}</span>\n              <span id=\"memory\"><b>Memory:</b> {state.memory}</span>\n            </div>\n            \n            <div className=\"row\">\n              <CalcButton value={\"M+\"} onClick={() => dispatch(addToMemory(state.total))}/>\n              <CalcButton value={\"MR\"} onClick={() => dispatch(applyMemory())}/>\n              <CalcButton value={\"MC\"} onClick={() => dispatch(clearMemory())}/>\n            </div>\n\n            <div className=\"row\">\n              <CalcButton value={1} onClick={() => dispatch(applyNumber(1))}/>\n              <CalcButton value={2} onClick={() => dispatch(applyNumber(2))}/>\n              <CalcButton value={3} onClick={() => dispatch(applyNumber(3))}/>\n            </div>\n\n            <div className=\"row\">\n              <CalcButton value={4} onClick={() => dispatch(applyNumber(4))}/>\n              <CalcButton value={5} onClick={() => dispatch(applyNumber(5))}/>\n              <CalcButton value={6} onClick={() => dispatch(applyNumber(6))}/>\n            </div>\n\n            <div className=\"row\">\n              <CalcButton value={7} onClick={() => dispatch(applyNumber(7))}/>\n              <CalcButton value={8} onClick={() => dispatch(applyNumber(8))}/>\n              <CalcButton value={9} onClick={() => dispatch(applyNumber(9))}/>\n            </div>\n\n            <div className=\"row\">\n              <CalcButton value={\"+\"} onClick={() => dispatch(changeOperation(\"+\"))}/>\n              <CalcButton value={\"*\"} onClick={() => dispatch(changeOperation(\"*\"))}/>\n              <CalcButton value={\"-\"} onClick={() => dispatch(changeOperation(\"-\"))}/>\n            </div>\n\n            <div className=\"row ce_button\">\n              <CalcButton value={\"CE\"} onClick={() => dispatch(clearDisplay())}/>\n            </div>\n\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/williamdye/WillGit/web-module-project-reducer/src/reportWebVitals.js",[],"/Users/williamdye/WillGit/web-module-project-reducer/src/components/CalcButton.js",[],"/Users/williamdye/WillGit/web-module-project-reducer/src/components/TotalDisplay.js",[],"/Users/williamdye/WillGit/web-module-project-reducer/src/reducers/index.js",["38"],"import { ADD_ONE, APPLY_NUMBER, CHANGE_OPERATION, CLEAR_DISPLAY, ADD_TO_MEMORY, APPLY_MEMORY, CLEAR_MEMORY } from './../actions';\n\nexport const initialState = {\n    total: 0,\n    operation: \"+\",\n    memory: 0\n}\n\nconst calculateResult = (num1, num2, operation) => {\n    switch(operation) {\n        case(\"+\"):\n            return num1 + num2;\n        case(\"*\"):\n            return num1 * num2;\n        case(\"-\"):\n            return num1 - num2;\n    }\n}\n\n// const calculateMemory = (mem1, mem2, operation) => {\n//     switch(operation) {\n//         case(\"+\"):\n//             return mem1 + mem2;\n//         case(\"*\"):\n//             return mem1 + mem2;\n//         case(\"-\"):\n//             return mem1 + mem2; \n//     }\n// }\n\nconst reducer = (state, action) => {\n    switch(action.type) {\n        case(ADD_ONE):\n            return({\n                ...state,\n                total: state.total + 1\n            });\n\n        case(APPLY_NUMBER):\n            return ({ \n                ...state, \n                total: calculateResult(state.total, action.payload, state.operation)\n            });\n        \n        case(CHANGE_OPERATION):\n            return ({\n                ...state,\n                operation: action.payload\n            });\n\n        case(CLEAR_DISPLAY):\n            return ({\n                ...state,\n                total: 0\n            })\n\n        case(ADD_TO_MEMORY):\n            return ({\n                ...state,\n                memory: action.payload\n            })\n\n        case(APPLY_MEMORY):\n            return ({\n                ...state,\n                total: calculateResult(state.memory, state.total, state.operation)\n            })\n\n        case(CLEAR_MEMORY):\n            return ({\n                ...state,\n                memory: 0\n            })\n            \n        default:\n            return state;\n    }\n}\n\nexport default reducer;","/Users/williamdye/WillGit/web-module-project-reducer/src/actions/index.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":5,"column":10,"nodeType":"45","messageId":"46","endLine":5,"endColumn":16},{"ruleId":"47","severity":1,"message":"48","line":17,"column":9,"nodeType":"49","endLine":17,"endColumn":46},{"ruleId":"50","severity":1,"message":"51","line":17,"column":46,"nodeType":"49","endLine":17,"endColumn":93},{"ruleId":"52","severity":1,"message":"53","line":10,"column":5,"nodeType":"54","messageId":"55","endLine":17,"endColumn":6},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'addOne' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]